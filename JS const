The CONST keyword was introduced in E76

Variables defined with const cannot be redeclared
Variables defined with const can’t be reassigned
Varaibles defined with const have block scope

Can’t be re-assigned
A const variable can’t be re-assigned:

//So this is going to create an error

Const PI = 3.1453388 ;
PI = 3.14;
PI = PI + 10;
// so this will create an error since the const was assigned twice

Must be assigned only once

js const variables must be assigned a value when they are declared::

Const PI = 3.14585899 ;
// must be assigned only once

NOTE as a general practice ::
As a general rule, always declare a variable with const unless you know that the value will change.

Use const when you declare::

• A new array
• A new object
• A new unction
• A new RegExp

When to use JS const

Constant objects and arrays

The keyword const is a little misleading
It doesn’t define a constant value. It defines a constant reference to a value

So something with CONST variables:: we can only assign them once

With values, arrays

, objects

But you can change the elemnts within a constant array or change the properties of constant
objects

Constant arrays::
You can change the elements of a constant array::

// you can create a constant array:
Const cars = [ “Saab” , “Volvo” , “BMW” ] ;

// You can change an element
Cars [ 0 ] = “Toyota” ;

Cars.push(“Audi”);

But you cannot reassign the array::
Const cars = [“Saab” , “Volvo” , “BMW” ] ;
Cars = [ “Toyota” , “Volvo” , “Audi” ] ;

Constant objects
You can change the properties of a constant object

// you can create a const object
Const car = { type:”Fiat” , model: “500” , color: “white” } ;

// you can change a property:
Car.color = “red”;

// you can add a property:
Car.owner = “Johnson”

But you can’t re-assign the object

Block scope::

Declaring a variable with const is similar to let when it comes to block scope

The x declared in the block, in this example, is not the same as the x declared outside the block::

Const x = 10;
// here x is 10

{
Const x = 2;
// here x is 2
}

// here x is 10

So curly braces in js for const will still go towards the original const value

Redlaclaring
Redeclaring a js var variable is allowed anywhere in the program:
Var x. = 2;
X= 4;

Redeclaring an existing var or let variable to const in the same scope, isn’t allowed

Var x = 2;
Const x = 2;
{

Let x = 2; // allowed
Const x = 2; // not allowed
}

Reassigning an existing const variable, in the same scope, is not allowed

Const x = 2; // allowed
X = 4; // not allowed
Let x = 4; // not allowed
Var x = 23; / not allowed

{
Const x = 2; // allowed
X = 2; // not allowed
}

Redeclaring a variable with const, in another scope or in another block is allowed:

Example::

Const x = 2; // allowed
{

Const x = 3; // allowed
}

{
Const x = 4; // allowed
}

Const hoisting
Variables defined with var are hoisted to the top and can be initialized at any time
Meaning; you can use the variable before it is declared::

<H2> JavaScript Hoistings</h2>
<With <b> var </b>, you can use a variable before it is declared: </p>
<p id = “demo”></p>

<Scipt>
CarName = “Volvo”;
Document.getElementById(“demo”).innerHTML = carName;
Var carName’
</script>

CarName = “Volvo”;
Var carName ;

If you want to learn more about hoisting, study the chapter js hoisting

Variables defined with const are also hoisted to the top, but not initialized
Meaning: using a const variable before it is declared will result in a referenceError::
